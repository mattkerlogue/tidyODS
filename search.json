[{"path":"https://mattkerlogue.github.io/tidyODS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Matt Kerlogue Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Kerlogue. Author, maintainer.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kerlogue M (2022). tidyods: Read cells ODS files. https://github.com/mattkerlogue/tidyods, https://mattkerlogue.github.io/tidyods/.","code":"@Manual{,   title = {tidyods: Read cells from ODS files},   author = {Matt Kerlogue},   year = {2022},   note = {https://github.com/mattkerlogue/tidyods, https://mattkerlogue.github.io/tidyods/}, }"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"tidyods","dir":"","previous_headings":"","what":"Read cells from ODS files","title":"Read cells from ODS files","text":"tidyods R package import cells OpenDocument Spreadsheet (ODS) file, provide information cell’s postion, value types formulas, provide methods “rectify” cells back 2-dimensional data.frame (specifically tidyverse tibble).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read cells from ODS files","text":"can install development version tidyods like :","code":"remotes::install_github(\"mattkerlogue/tidyods\")"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read cells from ODS files","text":"tidyods package exports following functions users: read_ods_cells(path, sheet, quick = FALSE): extract cells sheet ODS file read_ods_sheet(path, sheet, rectify = \"simple\", base_values = TRUE, quick = FALSE): extract cells ODS sheet return rectangular dataset, like spreadsheet ods_sheets(path): list sheets ODS fie simple_rectify(path): “rectify” set cells rectangular dataset, like spreadsheet package includes example ODS two sheets: penguins types. penguins sheet simple 6 rows 4 columns sheet stores output following code: types sheet shows examples different ODS data types:","code":"library(tidyods)  example_file <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\")  ods_sheets(example_file) #> Unzipping ODS file #> Reading XML file #> [1] \"penguins\" \"types\" palmerpenguins::penguins |>   tidyr::drop_na() |>   dplyr::group_by(species, female = sex == \"female\") |>   dplyr::summarise(     dplyr::across(c(bill_length_mm, body_mass_g), mean, na.rm = TRUE),     .groups = \"drop\"   ) #> # A tibble: 6 × 4 #>   species   female bill_length_mm body_mass_g #>   <fct>     <lgl>           <dbl>       <dbl> #> 1 Adelie    FALSE            40.4       4043. #> 2 Adelie    TRUE             37.3       3369. #> 3 Chinstrap FALSE            51.1       3939. #> 4 Chinstrap TRUE             46.6       3527. #> 5 Gentoo    FALSE            49.5       5485. #> 6 Gentoo    TRUE             45.6       4680. penguin_sheet <- read_ods_sheet(example_file, \"penguins\", quick = TRUE) #> Getting ODS sheet #> Unzipping ODS file #> Getting ODS sheetReading XML file #> Getting ODS sheetProcessing rows...  penguin_sheet #> # A tibble: 7 × 4 #>   X1        X2     X3             X4          #>   <chr>     <chr>  <chr>          <chr>       #> 1 species   female bill_length_mm body_mass_g #> 2 Adelie    FALSE  40.4           4043        #> 3 Adelie    TRUE   37.3           3369        #> 4 Chinstrap FALSE  51.1           3939        #> 5 Chinstrap TRUE   46.6           3527        #> 6 Gentoo    FALSE  49.5           5485        #> 7 Gentoo    TRUE   45.6           4680 types_cells <- read_ods_cells(example_file, \"types\") #> Getting ODS sheet #> Unzipping ODS file #> Getting ODS sheetReading XML file #> Getting ODS sheetProcessing rows...  types_cells |>    dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::glimpse() #> Rows: 90 #> Columns: 8 #> Groups: col [9] #> $ row             <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, … #> $ col             <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, … #> $ cell_type       <chr> \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\"… #> $ value_type      <chr> \"string\", \"boolean\", \"currency\", \"date\", \"time\", \"date… #> $ cell_formula    <chr> NA, NA, NA, NA, NA, NA, NA, NA, \"of:=[.G2]*[.H2]\", NA,… #> $ cell_content    <chr> \"Cat\", \"TRUE\", \"£1.20\", \"15/06/22\", \"13:24:56\", \"15/06… #> $ base_value      <chr> \"Cat\", \"true\", \"1.2\", \"2022-06-15\", \"PT13H24M56S\", \"20… #> $ currency_symbol <chr> NA, NA, \"GBP\", NA, NA, NA, NA, NA, NA, NA, NA, \"GBP\", …  types_cells |>   dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::slice_head(n = 2) |>   dplyr::select(-cell_type) #> # A tibble: 18 × 7 #> # Groups:   col [9] #>      row   col value_type cell_formula   cell_content base_value currency_symbol #>    <int> <int> <chr>      <chr>          <chr>        <chr>      <chr>           #>  1     2     1 string     <NA>           Cat          Cat        <NA>            #>  2     3     1 string     <NA>           Dog          Dog        <NA>            #>  3     2     2 boolean    <NA>           TRUE         true       <NA>            #>  4     3     2 boolean    <NA>           FALSE        false      <NA>            #>  5     2     3 currency   <NA>           £1.20        1.2        GBP             #>  6     3     3 currency   <NA>           £1.20        1.2        GBP             #>  7     2     4 date       <NA>           15/06/22     2022-06-15 <NA>            #>  8     3     4 date       <NA>           06/15/22     2022-06-15 <NA>            #>  9     2     5 time       <NA>           13:24:56     PT13H24M5… <NA>            #> 10     3     5 time       <NA>           13:24        PT13H24M5… <NA>            #> 11     2     6 date       <NA>           15/06/2022 … 2022-06-1… <NA>            #> 12     3     6 date       <NA>           15/06/22 13… 2022-06-1… <NA>            #> 13     2     7 float      <NA>           12035        12034.567… <NA>            #> 14     3     7 float      <NA>           12034.57     12034.567… <NA>            #> 15     2     8 float      <NA>           0.5467       0.5467     <NA>            #> 16     3     8 percentage <NA>           55%          0.5467     <NA>            #> 17     2     9 float      of:=[.G2]*[.H… 6579.3       6579.2982… <NA>            #> 18     3     9 float      of:=[.G3]*[.H… 6579.3       6579.2982… <NA>"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Read cells from ODS files","text":"ODS file zipped collection XML files associated files. tidyods, like {readODS} package, uses xml2 package process file. three likely sources performance issues: downloading remote files, unzipping ODS file, processing rows. default settings, performance tidyods functions slower {readODS}, however tidyods provides console messages progress bars user. Performance can improved setting quick = TRUE read_ods_cells() read_ods_sheet(), extract simple text representation cell, .e. provide information cell value types, formulas underlying base value numbers, dates times. method also ignores replicated white space characters. test performance use ODS file published UK Government number civil servants postcode (5,544 rows 11 columns). Analysis read times indicates using quick = TRUE setting read_ods_cells() results read 10 times faster full cell extraction method around 1.5 times faster reading sheet {readODS}. cursory test huge file known slow/non-performative {readODS} shows promise. Performance issues tracked discussed issue #3 package’s GitHub repository. However, performance major determinant workflow (.e. large files), likely sensible open file spreadsheet application, save file .xslx format file read using tidyxl.","code":"types_cells_quick <- read_ods_cells(example_file, \"types\", quick = TRUE) #> Getting ODS sheet #> Unzipping ODS file #> Getting ODS sheetReading XML file #> Getting ODS sheetProcessing rows...  types_cells_quick |>   dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::glimpse() #> Rows: 90 #> Columns: 3 #> Groups: col [9] #> $ row          <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, … #> $ col          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, … #> $ cell_content <chr> \"Cat\", \"TRUE\", \"£1.20\", \"15/06/22\", \"13:24:56\", \"15/06/20… microbenchmark::microbenchmark(   \"tidyods_slow\" = tidyods::read_ods_cells(test_ods, \"Staff_in_post\",      quick = FALSE),   \"tidyods_quick\" = tidyods::read_ods_cells(test_ods, \"Staff_in_post\",      quick = TRUE),   \"readODS\" = readODS::read_ods(test_ods, \"Staff_in_post\"),   times = 3 )  #> Unit: seconds #>          expr     min      lq    mean  median      uq     max neval #>  tidyods_slow 35.4833 35.7546 35.8626 36.0259 36.0523 36.0786     3 #> tidyods_quick  3.2470  3.2584  3.2935  3.2697  3.3167  3.3638     3 #>       readods  5.1141  5.1606  5.2050  5.2072  5.2505  5.2939     3"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Read cells from ODS files","text":"{tidyODS} package heavily inspired two existing packages: {readODS} package provides functionality read write ODS files R, resulting data.frame reflecting way data viewed spreadsheet editor application (.e two-dimension table structure). {tidyxl} package reads cells Excel files provides data.frame cell row columns provide information cell’s location, value value type, formula formatting. {unpivotr} package works datasets cells (created tidyxl).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"philosophy","dir":"","previous_headings":"","what":"Philosophy","title":"Read cells from ODS files","text":"{readODS} package package CRAN handles reading ODS files, whereas 20 packages (12 June 2022) CRAN work Excel files (tidyxl one). respects due wider usage Excel files businesses, governments, academia organisations publish share data. Various governments international organisations starting mandate use OpenDocument Format files publishing information. initial purpose tidyods provide second package R ecosystem reading ODS files, part prompted encountering error {readODS} discovering alternative pacakge available. example run error using readxl package use easily try theopenxlsx xlsx instead. conceptual code development lead creation output dataset similar produced tidyxl package. Thus, tidyods extracts cells ODS document manner tidyxl, includes functions “rectify” cells also provide output similar {readODS} (many read Excel files). similar rectify function unpivotr package.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"List the sheets in an ODS file — ods_sheets","title":"List the sheets in an ODS file — ods_sheets","text":"Get list sheets ODS file, either explore structure file use input iterating whole spreadsheet document.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the sheets in an ODS file — ods_sheets","text":"","code":"ods_sheets(path)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the sheets in an ODS file — ods_sheets","text":"path ODS file","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the sheets in an ODS file — ods_sheets","text":"character vector sheet names","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Read cells from an ODS sheet — read_ods_cells","title":"Read cells from an ODS sheet — read_ods_cells","text":"Import cells OpenDocument Spreadsheet (ODS) file. resulting dataaset cell row columns providing information cell's postion, value types containing formulas.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read cells from an ODS sheet — read_ods_cells","text":"","code":"read_ods_cells(path, sheet, quick = FALSE)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read cells from an ODS sheet — read_ods_cells","text":"path ODS file sheet sheet within ODS file quick Whether use quick reading process","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read cells from an ODS sheet — read_ods_cells","text":"tibble following information: row: row number cell col: column number cell cell_type: type cell, either \"cell\", \"empty\" \"merged\" value_type: ODS value type (see details) cell_formula: ODS formula specification cell_content: value cell represented user spreadsheet application (.e. text formatting applied) base_value: underlying value cell (see details) currency symbol: currency symbol cells value_type currency using quick argument row, col cell_content returned.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read cells from an ODS sheet — read_ods_cells","text":"Cells assigned cell_type \"cell\" content, \"empty\" content, \"merged\" part set merged cells. value_type cell based \"value-type\" attribute defined OpenDocument Format specification. 7 value types: boolean: equivalent R's base::logical() data type currency: numeric value, optionally currency symbol date: date date-time stored ISO format float: numeric value, ODS format distinguish different numeric types percentage: numeric value, formatted display percentage string: equivalent R's base::character() time: duration, stored ISO format currency value types optionally currency symbol (e.g. GBP, EUR, USD) can set, provided separate base_value currency_symbol. read_ods_cells provides two representations cell's value. cell_content column provides cell's value presented user traditional spreadsheet application (Microsoft Excel, Google Sheets LibreOffice Calc), .e. applying cell formatting rules. base_value column provides cell's underlying value, .e. without formatting. Processing ODS XML memory intensive process, can achieve significant speed enhancements setting quick argument FALSE, extract text content cell. Note also ignores repeated white space elements (.e. \"  B   C\" returned \"B C\").","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"Read ODS sheet rectangular dataset","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"","code":"read_ods_sheet(   path,   sheet,   rectify = \"simple\",   base_values = TRUE,   quick = FALSE )"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"path ODS file sheet sheet within ODS file rectify method convert cells two-dimensions, can \"simple\" base_values Whether use base_value cell (TRUE, default) whether provide cell content seen spreadsheet user. quick Whether use quick reading process","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"tibble, presenting cells traditional two-dimension spreadsheet format.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"present, rectify can set \"simple\", calls simple_rectify() method convert cells sheet. set TRUE (default) base_values argument underlying cell values used. FALSE cell content seen spreadsheet application user shown. See read_ods_cells() details. Setting quick - TRUE ignore setting base_values, quick process returns cell content seen spreadsheet users (ignoring repeated white space cell content).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/simple_rectify.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ODS cells to a two-dimensional dataset — simple_rectify","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"simple_rectify converts set cells  extracted read_ods_cells() traditional rectangular two-dimensional structure.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/simple_rectify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"","code":"simple_rectify(ods_cells, base_values = TRUE)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/simple_rectify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"ods_cells set cells ODS sheet base_values Whether use base_value cell (TRUE, default) whether provide cell content seen spreadsheet user.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/simple_rectify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"tibble representing original spreadsheet format.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/simple_rectify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"set TRUE (default) base_values argument underlying cell values used. FALSE cell content seen spreadsheet application user shown. See read_ods_cells() details. Column headers format \"X#\", .e. \"X\" column number. can use another function janitor::row_to_names() replace values row within dataset.","code":""}]
