[{"path":[]},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement matt.kerlogue@.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidyods","title":"Contributing to tidyods","text":"outlines propose change tidyods R Package.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidyods","text":"R help documentation, including package’s webiste, created roxygen2 comments, need edit corresponding source .R file rather .Rd","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidyods","text":"’ve found bug, please file issue illustrates bug, preferably example code/example ODS file. want add new functionality propose improvements package code please create issue discuss explain idea(s).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidyods","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"mattkerlogue/tidyods\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR), e.g. new-feature -bug. Make changes, commit git, create PR, include fixes #issue-number title description request.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidyods","text":"New code follow tidyverse style guide. Documentation created using roxygen2, Markdown syntax. use testthat unit tests.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidyods","text":"Please note tidyods project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Matt Kerlogue Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"reading-data-from-cells","dir":"Articles","previous_headings":"","what":"Reading data from cells","title":"Extracting cell information","text":"read data ODS file read_ods_cells() function. resulting tibble provides 28 columns information cells, row representing individual cell input spreadsheet. four arguments read_ods_cells(): path, path ODS file sheet, sheet wish extract quick, whether extract subset cell information quiet, whether show console messages sheet argument can either index number sheet (ranging 1 total number sheets spreadsheet document) name sheet (e.g. \"types\" instead 2 example ). quick argument extracts small number columns useful largely concerned cell values; see quick extraction section details. quiet argument turns console messages, ODS files written XML can take significant time process progress messages provided console interactive users. advised set false batch operations.","code":"example_file <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") types_cells <- read_ods_cells(example_file, 2) dplyr::glimpse(types_cells) #> Rows: 160 #> Columns: 28 #> $ sheet                  <chr> \"types\", \"types\", \"types\", \"types\", \"types\", \"t… #> $ address                <chr> \"A1\", \"B1\", \"C1\", \"D1\", \"E1\", \"F1\", \"G1\", \"H1\",… #> $ row                    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,… #> $ col                    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6… #> $ cell_type              <chr> \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\",… #> $ is_empty               <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ value_type             <chr> \"string\", \"string\", \"string\", \"string\", \"string… #> $ cell_content           <chr> \"String\", \"Boolean\", \"Currency\", \"Date\", \"Time\"… #> $ base_value             <chr> \"String\", \"Boolean\", \"Currency\", \"Date\", \"Time\"… #> $ numeric_value          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ currency_symbol        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ boolean_value          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, TRU… #> $ date_value             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ time_value             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ has_formula            <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ formula                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ has_error              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ error_type             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ has_annotation         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ annotation             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ is_merged              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ merge_colspan          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ merge_rowspan          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ merge_shape            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ cell_style             <chr> NA, \"Default\", \"Default\", \"Default\", \"Default\",… #> $ row_style              <chr> \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\"… #> $ col_style              <chr> \"co6\", \"co7\", \"co8\", \"co9\", \"co10\", \"co11\", \"co… #> $ col_default_cell_style <chr> \"Default\", \"ce56\", \"ce4\", \"ce11\", \"ce21\", \"ce31…"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"cell-information","dir":"Articles","previous_headings":"","what":"Cell information","title":"Extracting cell information","text":"28 types information returned read_ods_cells(), can grouped three categories: location information, value information, metadata.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"location-information","dir":"Articles","previous_headings":"Cell information","what":"Location information","title":"Extracting cell information","text":"first four columns information relate cell’s location spreadsheet. sheet, name sheet cell belongs address, address cell within sheet using “A1” notation row, row number cell col, column number cell address column derived row col using cellranger package. provides address “A1” notation commonly used spreadsheet applications letter corresponds column number corresponds row. “A1” notation used ODS files calculation formulas.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"value-information","dir":"Articles","previous_headings":"Cell information","what":"Value information","title":"Extracting cell information","text":"10 columns provide information cell’s value. cell_type, type cell is_empty, whether cell content (.e. cell_type == \"empty\") value_type, value type set ODS file cell_content, cell’s value formatted users spreadsheet applications base_value, “raw” value cell numeric_value, numeric value types raw value numeric() vector currency_symbol, currency value types currency symbol associated numeric value boolean_value, boolean value types raw value logical() vector date_value, date value types (dates date-times) “raw” value character() vector time_value, time value types, “raw” value character() vector Cells one four types, empty content /value type, merge-lead top-left cell merge group cells merge group classified merge-hidden, cells simply cell. value_type derived ODS specification defines seven value types: boolean, equivalent R’s logical() data type currency, numeric value, optionally currency symbol date, date date-time stored ISO 8601 format, ODS specification differentiate date (e.g. 15/06/2022) date-time (e.g. 15/06/2023 13:47) float, numeric value, ODS format distinguish different numeric types percentage, numeric value, formatted display percentage string, equivalent R’s character() time, duration, stored ISO 8601 format cell_content column provides value cell displayed formatted users spreadsheet application. Non-string values stored separately underlying ODS XML file, extracted separate columns (numeric_value, boolean_value, date_value time_value) read_ods_cells(), numeric boolean values also coerced numeric() logical() vector. base_value column provides combination cell_content cells strings cells string value types value relevant type specific column. currency value types optionally currency symbol (e.g. GBP, EUR, USD, JPY) can set, provided currency_symbol column. value type examples section provides details different value types stored processed.","code":"types_cells |>    dplyr::filter(row == 3) |>    dplyr::select(value_type:currency_symbol) #> # A tibble: 10 × 5 #>    value_type cell_content      base_value         numeric_value currency_symbol #>    <chr>      <chr>             <chr>                      <dbl> <chr>           #>  1 string     Cell with comment Cell with comment         NA     NA              #>  2 boolean    FALSE             false                     NA     NA              #>  3 currency   £1.20             1.2                        1.2   GBP             #>  4 date       06/15/22          2022-06-15                NA     NA              #>  5 time       13:24             PT13H24M56S               NA     NA              #>  6 date       15/06/22 13:24    2022-06-15T13:24:…        NA     NA              #>  7 float      12034.57          12034.56789            12035.    NA              #>  8 percentage 55%               0.5467                     0.547 NA              #>  9 float      6579.3            6579.298265463          6579.    NA              #> 10 string     #DIV/0!           #DIV/0!                   NA     NA  types_cells |>    dplyr::filter(row == 3) |>    dplyr::select(value_type, base_value, boolean_value:time_value) #> # A tibble: 10 × 5 #>    value_type base_value          boolean_value date_value          time_value  #>    <chr>      <chr>               <lgl>         <chr>               <chr>       #>  1 string     Cell with comment   NA            NA                  NA          #>  2 boolean    false               FALSE         NA                  NA          #>  3 currency   1.2                 NA            NA                  NA          #>  4 date       2022-06-15          NA            2022-06-15          NA          #>  5 time       PT13H24M56S         NA            NA                  PT13H24M56S #>  6 date       2022-06-15T13:24:56 NA            2022-06-15T13:24:56 NA          #>  7 float      12034.56789         NA            NA                  NA          #>  8 percentage 0.5467              NA            NA                  NA          #>  9 float      6579.298265463      NA            NA                  NA          #> 10 string     #DIV/0!             NA            NA                  NA"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"other-metadata","dir":"Articles","previous_headings":"Cell information","what":"Other metadata","title":"Extracting cell information","text":"Finally, read_ods_cells() provides 12 columns additional metadata cell. has_formula, whether cell value calculated formula formula, formula used calculate cell value has_error, whether cell value formula results error error_type, type error cell experiencing has_annotation, whether cell comment/annotation annotation, content cell’s comment/annotation is_merged, whether cell part merge group merge_colspan, lead cell merge group number columns spanned merge group merge_rowspan, lead cell merge group number rows spanned merge group merge_shape, lead cell merge group shape merge group cell_style, style reference cell row_style, style reference row col_style, style reference column col_deftaul_cell_style, default style reference cells column","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"formulas","dir":"Articles","previous_headings":"Cell information > Other metadata","what":"Formulas","title":"Extracting cell information","text":"has_formula column indicates cell value calculated formula, provided formula column. use formulas ODS files can consult OpenFormula specification.","code":"types_cells |>    dplyr::filter(col == 9 & has_formula) |>    dplyr::select(value_type, cell_content, numeric_value, has_formula, formula) |>   head() #> # A tibble: 6 × 5 #>   value_type cell_content numeric_value has_formula formula         #>   <chr>      <chr>                <dbl> <lgl>       <chr>           #> 1 float      6579.3               6579. TRUE        of:=[.G2]*[.H2] #> 2 float      6579.3               6579. TRUE        of:=[.G3]*[.H3] #> 3 float      6579.3               6579. TRUE        of:=[.G4]*[.H4] #> 4 float      6579.3               6579. TRUE        of:=[.G5]*[.H5] #> 5 float      6579.3               6579. TRUE        of:=[.G6]*[.H6] #> 6 float      6579.3               6579. TRUE        of:=[.G7]*[.H7]"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"errors","dir":"Articles","previous_headings":"Cell information > Other metadata","what":"Errors","title":"Extracting cell information","text":"Formulas spreadsheets can result calculation errors. has_error column indicates cell results error. error_type column similar =ERROR.TYPE() function Microsoft Excel, Google Sheets LibreOffice, provide number denote type error. error_type value 1 7 501 540: 1 #NULL! errors Excel/Google Sheets Err:511 LibreOffice, typically sort error formula specification missing operator (Excel/Google Sheets) missing variable (LibreOffice) 2 #DIV/0! (division zero) errors 3 #VALUE! (value type) errors, e.g. formula uses string rather number 4 #REF! (invalid cell reference) errors 5 #NAME? errors, e.g. formula specifies function doesn’t exist 6 #NUM! (calculation overflow) errors, e.g. result 9999^9999 7 #N/(logic) errors, e.g. unable match values 501 540 LibreOffice error LibreOffice assigns errors error code 501 540, displayed error like #DIV/0! shown cell_content \"Err:5##\". See LibreOffice’s documentation error codes details error codes.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"annotations","dir":"Articles","previous_headings":"Cell information > Other metadata","what":"Annotations","title":"Extracting cell information","text":"Spreadsheet applications allow add notes comments cells provide addition contextual information. has_annotation column indicates whether cell annotation associated . annotation column provides text content annotation. Note: different spreadsheet applications handle annotations different ways, read_ods_cells() take account differences provides basic representation text contained annotation. LibreOffice supports basic “comment” annotation called “note” Microsoft Excel Google Sheets. addition “note” Microsoft Excel Google Sheets proprietary formats allow threaded comments allow users leave comments reply comments, saving ODS features saved annotations like notes. However coercion threads note inclusion comment/reply author details varies.","code":"types_cells |>      dplyr::filter(has_annotation) |>    dplyr::select(has_annotation, annotation) #> # A tibble: 2 × 2 #>   has_annotation annotation                                                    #>   <lgl>          <chr>                                                         #> 1 TRUE           \"Test comment\"                                                #> 2 TRUE           \"Comment 2\\nMore comments\\nComments with space\\nBold comment\""},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"merged-cells","dir":"Articles","previous_headings":"Cell information > Other metadata","what":"Merged cells","title":"Extracting cell information","text":"Spreadsheets allow merge cells, largely presentational purposes. Merged cells cell_type either merge-lead top-left cell merge group merge-hidden cell hidden merge group. is_merged indicates whether cell either types. merging cells Microsoft Office Google Sheets content top-left cell retained, however LibreOffice merging cells retains content cells hidden merge operation. merge-lead cells also get number columns rows spanned merge group merge_colspan merge_rowspan respectively. span information used define merge_shape column: shape merge group defined vertical merge_colspan equal 1 merge_rowspan greater 1 shape merge group defined horizontal merge_colspan greater 1 merge_rowspan equal 1 otherwise shape merge group rectangular.","code":"types_cells |>      dplyr::filter(is_merged) |>    dplyr::select(address, cell_type, cell_content, is_merged) #> # A tibble: 4 × 4 #>   address cell_type    cell_content                 is_merged #>   <chr>   <chr>        <chr>                        <lgl>     #> 1 A8      merge-lead   Merged cell                  TRUE      #> 2 A9      merge-hidden NA                           TRUE      #> 3 A10     merge-lead   Merged cell with hidden text TRUE      #> 4 A11     merge-hidden Hidden text                  TRUE merge_cells <- read_ods_cells(example_file, 3)  merge_cells |>   dplyr::select(row, col, cell_type) |>   dplyr::mutate(col = paste0(\"x\", col)) |>   tidyr::pivot_wider(names_from = col, values_from = cell_type) #> # A tibble: 5 × 5 #>     row x1           x2           x3           x4           #>   <dbl> <chr>        <chr>        <chr>        <chr>        #> 1     1 merge-lead   merge-hidden NA           NA           #> 2     2 merge-lead   NA           NA           NA           #> 3     3 merge-hidden NA           NA           NA           #> 4     4 empty        empty        merge-lead   merge-hidden #> 5     5 empty        empty        merge-hidden merge-hidden  merge_cells |>    dplyr::filter(cell_type == \"merge-lead\") |>    dplyr::select(address, cell_content, merge_colspan, merge_rowspan, merge_shape) #> # A tibble: 3 × 5 #>   address cell_content                   merge_colspan merge_rowspan merge_shape #>   <chr>   <chr>                                  <dbl>         <dbl> <chr>       #> 1 A1      \"A cell across two columns (a…             2             1 horizontal  #> 2 A2      \"A cell across two rows (a ve…             1             2 vertical    #> 3 C4      \"A cell across two columns an…             2             2 rectangular"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"style-information","dir":"Articles","previous_headings":"Cell information","what":"Style information","title":"Extracting cell information","text":"Style formatting information stored separately cells , instead cells, rows columns given reference identifiers look style information. four style identifiers cell: cell_style, style formatting specifically applied cell row_style, style formatting applied row col_style, style formatting applied column col_default_cell_style, default style formatting cells column, .e. cell_style set Note: style identifiers extracted, present tidyods package currently support extraction style formatting rules ODS XML.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"quick-extraction","dir":"Articles","previous_headings":"","what":"Quick extraction","title":"Extracting cell information","text":"core ODS file XML file, extracting information can processor heavy. primary interest just cell location cell values setting argument quick = TRUE can result faster extraction process provides six columns: sheet, address, row, col, value_type base_value. quick extraction process varies base_value column constructed. quick = TRUE float percentage values taken raw numeric form, types cell_content used. means currency, date time value types value formatted spreadsheet application users returned rather “raw” value stored underlying XML file.","code":"read_ods_cells(example_file, 2, quick = TRUE) |>    dplyr::filter(row == 3) #> # A tibble: 10 × 6 #>    sheet address   row   col value_type base_value        #>    <chr> <chr>   <int> <int> <chr>      <chr>             #>  1 types A3          3     1 string     Cell with comment #>  2 types B3          3     2 boolean    FALSE             #>  3 types C3          3     3 currency   £1.20             #>  4 types D3          3     4 date       06/15/22          #>  5 types E3          3     5 time       13:24             #>  6 types F3          3     6 date       15/06/22 13:24    #>  7 types G3          3     7 float      12034.56789       #>  8 types H3          3     8 percentage 0.5467            #>  9 types I3          3     9 float      6579.298265463    #> 10 types J3          3    10 string     #DIV/0!"},{"path":[]},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"boolean","dir":"Articles","previous_headings":"Value types examples","what":"Boolean","title":"Extracting cell information","text":"Boolean values (TRUE/FALSE) equivalent R’s logical() data type. Note: ODS files produced Google Sheets output boolean values differently applications. Google Sheets stores booleans float values 0 FALSE 1 TRUE, gives cells formula =FALSE() =TRUE() instead. read_ods_cells() output value type, numeric value formula written Google Sheets, however uses formula references input relevant TRUE/FALSE value boolean_value column.","code":"types_cells |>    dplyr::filter(value_type == \"boolean\") |>    dplyr::select(cell_content, base_value, boolean_value) #> # A tibble: 14 × 3 #>    cell_content base_value boolean_value #>    <chr>        <chr>      <lgl>         #>  1 TRUE         true       TRUE          #>  2 FALSE        false      FALSE         #>  3 TRUE         true       TRUE          #>  4 TRUE         true       TRUE          #>  5 FALSE        false      FALSE         #>  6 FALSE        false      FALSE         #>  7 TRUE         true       TRUE          #>  8 FALSE        false      FALSE         #>  9 FALSE        false      FALSE         #> 10 TRUE         true       TRUE          #> 11 FALSE        false      FALSE         #> 12 TRUE         true       TRUE          #> 13 TRUE         true       TRUE          #> 14 TRUE         true       TRUE"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"currency","dir":"Articles","previous_headings":"Value types examples","what":"Currency","title":"Extracting cell information","text":"Currency values numeric values currency_symbol, specific formatting currency symbol handled style formatting rules","code":"types_cells |>    dplyr::filter(value_type == \"currency\") |>    dplyr::select(cell_content, base_value, numeric_value, currency_symbol) #> # A tibble: 14 × 4 #>    cell_content base_value numeric_value currency_symbol #>    <chr>        <chr>              <dbl> <chr>           #>  1 £1.20        1.2                  1.2 GBP             #>  2 £1.20        1.2                  1.2 GBP             #>  3 £1.20        1.2                  1.2 GBP             #>  4 £1.20        1.2                  1.2 GBP             #>  5 1.20 €       1.2                  1.2 EUR             #>  6 1.20 €       1.2                  1.2 EUR             #>  7 €1.20        1.2                  1.2 EUR             #>  8 $1.20        1.2                  1.2 CAD             #>  9 $1.20        1.2                  1.2 USD             #> 10 1.20 USD     1.2                  1.2 USD             #> 11 £1.20        1.2                  1.2 GBP             #> 12 £1.20        1.2                  1.2 GBP             #> 13 £1.20        1.2                  1.2 GBP             #> 14 £1.20        1.2                  1.2 GBP"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"date","dir":"Articles","previous_headings":"Value types examples","what":"Date","title":"Extracting cell information","text":"ODS specification differentiate date (e.g. 15/06/2022) date-time (e.g. 15/06/2023 13:47). cell_content column show date formatted spreadsheet users, e.g. Wednesday, 15 June 2022 15/06/22. date_value (thus base_value) stored ISO 8601 format (0000-00-00T00:00:00). date value type can contain date date-time values date_value column coerced read_ods_cells() base R data type. can use base R’s .Date() coerce date, processing date-times need replace T marker stored date_value space order .POSIXct() coerce date-times correctly. Alternatively, can use lubridate::as_datetime() without modifying date_value. W3C XML schema details specifics ISO formatting dates date-times. Note: ODS files produced Microsoft Excel output dates date-times time component date set 00:00:00, reason read_ods_cells() automatically coercing date_value R data type.","code":"types_cells |>    dplyr::filter(value_type == \"date\") |>    dplyr::select(cell_content, base_value, date_value) #> # A tibble: 28 × 3 #>    cell_content                    base_value          date_value          #>    <chr>                           <chr>               <chr>               #>  1 15/06/22                        2022-06-15          2022-06-15          #>  2 15/06/2022 13:24:56             2022-06-15T13:24:56 2022-06-15T13:24:56 #>  3 06/15/22                        2022-06-15          2022-06-15          #>  4 15/06/22 13:24                  2022-06-15T13:24:56 2022-06-15T13:24:56 #>  5 Wed 15 Jun 22                   2022-06-15          2022-06-15          #>  6 15-Jun-22 13:24                 2022-06-15T13:24:56 2022-06-15T13:24:56 #>  7 Wednesday 15 June 2022          2022-06-15          2022-06-15          #>  8 Wednesday 15 June 2022 01:24 PM 2022-06-15T13:24:56 2022-06-15T13:24:56 #>  9 15-Jun-22                       2022-06-15          2022-06-15          #> 10 15/06 13.24                     2022-06-15T13:24:56 2022-06-15T13:24:56 #> # ℹ 18 more rows types_cells |>    dplyr::filter(value_type == \"date\") |>    dplyr::select(cell_content, date_value) |>   dplyr::filter(!grepl(\"T\", date_value)) |>    dplyr::mutate(date_value2 = as.Date(date_value)) #> # A tibble: 14 × 3 #>    cell_content           date_value date_value2 #>    <chr>                  <chr>      <date>      #>  1 15/06/22               2022-06-15 2022-06-15  #>  2 06/15/22               2022-06-15 2022-06-15  #>  3 Wed 15 Jun 22          2022-06-15 2022-06-15  #>  4 Wednesday 15 June 2022 2022-06-15 2022-06-15  #>  5 15-Jun-22              2022-06-15 2022-06-15  #>  6 15/06/2022             2022-06-15 2022-06-15  #>  7 15. Jun. 2022          2022-06-15 2022-06-15  #>  8 15 Jun 22              2022-06-15 2022-06-15  #>  9 mer. 15 juin 22        2022-06-15 2022-06-15  #> 10 2022-06-15             2022-06-15 2022-06-15  #> 11 15/06/22               2022-06-15 2022-06-15  #> 12 15/06/22               2022-06-15 2022-06-15  #> 13 15/06/22               2022-06-15 2022-06-15  #> 14 15/06/22               2022-06-15 2022-06-15  types_cells |>    dplyr::filter(value_type == \"date\") |>    dplyr::select(cell_content, date_value) |>   dplyr::filter(grepl(\"T\", date_value)) |>    # dplyr::mutate(date_value2 = as.POSIXct(gsub(\"T\", \" \", y)))   dplyr::mutate(date_value2 = lubridate::as_datetime(date_value)) #> # A tibble: 14 × 3 #>    cell_content                    date_value          date_value2         #>    <chr>                           <chr>               <dttm>              #>  1 15/06/2022 13:24:56             2022-06-15T13:24:56 2022-06-15 13:24:56 #>  2 15/06/22 13:24                  2022-06-15T13:24:56 2022-06-15 13:24:56 #>  3 15-Jun-22 13:24                 2022-06-15T13:24:56 2022-06-15 13:24:56 #>  4 Wednesday 15 June 2022 01:24 PM 2022-06-15T13:24:56 2022-06-15 13:24:56 #>  5 15/06 13.24                     2022-06-15T13:24:56 2022-06-15 13:24:56 #>  6 2022-06-15 13:24:56             2022-06-15T13:24:56 2022-06-15 13:24:56 #>  7 20220615-132456                 2022-06-15T13:24:56 2022-06-15 13:24:56 #>  8 15-Jun 1:24 PM                  2022-06-15T13:24:56 2022-06-15 13:24:56 #>  9 15 juin 2022 13:24              2022-06-15T13:24:56 2022-06-15 13:24:56 #> 10 06/15/22 13-24                  2022-06-15T13:24:56 2022-06-15 13:24:56 #> 11 15/06/2022 13:24:56             2022-06-15T13:24:56 2022-06-15 13:24:56 #> 12 15/06/2022 13:24:56             2022-06-15T13:24:56 2022-06-15 13:24:56 #> 13 15/06/2022 13:24:56             2022-06-15T13:24:56 2022-06-15 13:24:56 #> 14 15/06/2022 13:24:56             2022-06-15T13:24:56 2022-06-15 13:24:56"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"float","dir":"Articles","previous_headings":"Value types examples","what":"Float","title":"Extracting cell information","text":"Numeric values, exception currency percentage types, defined float value type.","code":"types_cells |>    dplyr::filter(value_type == \"float\") |>    dplyr::select(cell_content, base_value, numeric_value) #> # A tibble: 37 × 3 #>    cell_content base_value     numeric_value #>    <chr>        <chr>                  <dbl> #>  1 12035        12034.56789     12034.56789  #>  2 0.5467       0.5467              0.5467   #>  3 6579.3       6579.298265463   6579.298265 #>  4 12034.57     12034.56789     12034.56789  #>  5 6579.3       6579.298265463   6579.298265 #>  6 12034.5679   12034.56789     12034.56789  #>  7 6579.3       6579.298265463   6579.298265 #>  8 12034.568    12034.56789     12034.56789  #>  9 6579.3       6579.298265463   6579.298265 #> 10 12034.56789  12034.56789     12034.56789  #> # ℹ 27 more rows"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"percentage","dir":"Articles","previous_headings":"Value types examples","what":"Percentage","title":"Extracting cell information","text":"Percentages numeric values formatting include percentage sign. currency value type specifics formatting handled style formatting rules.","code":"types_cells |>    dplyr::filter(value_type == \"percentage\") |>    dplyr::select(cell_content, base_value, numeric_value) #> # A tibble: 5 × 3 #>   cell_content base_value numeric_value #>   <chr>        <chr>              <dbl> #> 1 55%          0.5467            0.5467 #> 2 54.7%        0.5467            0.5467 #> 3 54.67%       0.5467            0.5467 #> 4 54.670%      0.5467            0.5467 #> 5 54.6700%     0.5467            0.5467"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"string","dir":"Articles","previous_headings":"Value types examples","what":"String","title":"Extracting cell information","text":"String values derived cell_content, text representation cell seen spreadsheet application user. ODS specification allows separate string-value attribute XML table-cell tags, practice implemented major spreadsheet applications.","code":"types_cells |>    dplyr::filter(col == 1 & row > 1 & value_type == \"string\") |>    dplyr::select(cell_content, base_value) #> # A tibble: 14 × 2 #>    cell_content                                  base_value                      #>    <chr>                                         <chr>                           #>  1 \"Cell\"                                        \"Cell\"                          #>  2 \"Cell with comment\"                           \"Cell with comment\"             #>  3 \"Cell with\\nMultiple lines\"                   \"Cell with\\nMultiple lines\"     #>  4 \"Cell  with    repeated spaces\"               \"Cell  with    repeated spaces\" #>  5 \"Cells  with    spaces\\nAnd multiple   lines\" \"Cells  with    spaces\\nAnd mu… #>  6 \"Cell with formatted comment\"                 \"Cell with formatted comment\"   #>  7 \"Merged cell\"                                 \"Merged cell\"                   #>  8 \"Merged cell with hidden text\"                \"Merged cell with hidden text\"  #>  9 \"Hidden text\"                                 \"Hidden text\"                   #> 10 \"Cell with bold text\"                         \"Cell with bold text\"           #> 11 \"Repeated rows\"                               \"Repeated rows\"                 #> 12 \"Repeated rows\"                               \"Repeated rows\"                 #> 13 \"Repeated rows\"                               \"Repeated rows\"                 #> 14 \"une cellule dans une feuille de calcul\"      \"une cellule dans une feuille …"},{"path":"https://mattkerlogue.github.io/tidyODS/articles/read_cells.html","id":"time","dir":"Articles","previous_headings":"Value types examples","what":"Time","title":"Extracting cell information","text":"Time values defined duration specified ISO 8601, format PT00H00M00S. date values time values automatically coerced R data type. use base R’s .difftime() need remove convert letter characters, whereas lubridate::.duration() can coerce without modification. W3C XML schema details specifics ISO formatting dates date-times.","code":"types_cells |>    dplyr::filter(value_type == \"time\") |>    dplyr::select(cell_content, base_value, time_value) #> # A tibble: 14 × 3 #>    cell_content base_value  time_value  #>    <chr>        <chr>       <chr>       #>  1 13:24:56     PT13H24M56S PT13H24M56S #>  2 13:24        PT13H24M56S PT13H24M56S #>  3 01:24 PM     PT13H24M56S PT13H24M56S #>  4 1:24 PM      PT13H24M56S PT13H24M56S #>  5 1.24 PM      PT13H24M56S PT13H24M56S #>  6 13h24        PT13H24M56S PT13H24M56S #>  7 1324         PT13H24M56S PT13H24M56S #>  8 13 24        PT13H24M56S PT13H24M56S #>  9 13-24-56     PT13H24M56S PT13H24M56S #> 10 13:24:56.00  PT13H24M56S PT13H24M56S #> 11 13:24:56     PT13H24M56S PT13H24M56S #> 12 13:24:56     PT13H24M56S PT13H24M56S #> 13 13:24:56     PT13H24M56S PT13H24M56S #> 14 13:24:56     PT13H24M56S PT13H24M56S types_cells |>    dplyr::filter(value_type == \"time\") |>    dplyr::select(cell_content, time_value) |>   # dplyr::mutate(   #   time_value2 = as.difftime(gsub(\"[PTS]\", \"\", gsub(\"[HM]\", \":\", time_value)))   # )   dplyr::mutate(time_value2 = lubridate::as.duration(time_value)) #> # A tibble: 14 × 3 #>    cell_content time_value  time_value2           #>    <chr>        <chr>       <Duration>            #>  1 13:24:56     PT13H24M56S 48296s (~13.42 hours) #>  2 13:24        PT13H24M56S 48296s (~13.42 hours) #>  3 01:24 PM     PT13H24M56S 48296s (~13.42 hours) #>  4 1:24 PM      PT13H24M56S 48296s (~13.42 hours) #>  5 1.24 PM      PT13H24M56S 48296s (~13.42 hours) #>  6 13h24        PT13H24M56S 48296s (~13.42 hours) #>  7 1324         PT13H24M56S 48296s (~13.42 hours) #>  8 13 24        PT13H24M56S 48296s (~13.42 hours) #>  9 13-24-56     PT13H24M56S 48296s (~13.42 hours) #> 10 13:24:56.00  PT13H24M56S 48296s (~13.42 hours) #> 11 13:24:56     PT13H24M56S 48296s (~13.42 hours) #> 12 13:24:56     PT13H24M56S 48296s (~13.42 hours) #> 13 13:24:56     PT13H24M56S 48296s (~13.42 hours) #> 14 13:24:56     PT13H24M56S 48296s (~13.42 hours)"},{"path":"https://mattkerlogue.github.io/tidyODS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Kerlogue. Author, maintainer.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kerlogue M (2023). tidyods: Read cells ODS files. https://github.com/mattkerlogue/tidyods, https://mattkerlogue.github.io/tidyods/.","code":"@Manual{,   title = {tidyods: Read cells from ODS files},   author = {Matt Kerlogue},   year = {2023},   note = {https://github.com/mattkerlogue/tidyods, https://mattkerlogue.github.io/tidyods/}, }"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"tidyods-","dir":"","previous_headings":"","what":"Read cells from ODS files","title":"Read cells from ODS files","text":"tidyods imports cells OpenDocument Spreadsheet (ODS) file, provides just cell’s value also information cell’s position, value types formulas tidy format allow programmatic analysis, investigation manipulation. also provides methods “rectify” cells back 2-dimensional data.frame.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read cells from ODS files","text":"can install development version tidyods like :","code":"remotes::install_github(\"mattkerlogue/tidyods\")"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read cells from ODS files","text":"can read cells via read_ods_cells() function. helper function ods_sheets() can list sheets ODS file. package includes example ODS two sheets: penguins types. penguins sheet simple 6 rows 4 columns sheet stores output following code: functions “rectify” tidyods data.frame back traditional 2-dimensional array, function read_ods_sheet() combines read_ods_cells() rectify functions easily import dataset. types sheet shows examples different ODS data types:","code":"library(tidyods)  example_file <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\")  ods_sheets(example_file) #> [1] \"penguins\" \"types\"    \"merges\"  read_ods_cells(example_file, sheet = \"penguins\", quiet = TRUE) #> # A tibble: 28 × 28 #>    sheet    address   row   col cell_type is_empty value_type cell_content   #>    <chr>    <chr>   <dbl> <dbl> <chr>     <lgl>    <chr>      <chr>          #>  1 penguins A1          1     1 cell      FALSE    string     species        #>  2 penguins B1          1     2 cell      FALSE    string     female         #>  3 penguins C1          1     3 cell      FALSE    string     bill_length_mm #>  4 penguins D1          1     4 cell      FALSE    string     body_mass_g    #>  5 penguins A2          2     1 cell      FALSE    string     Adelie         #>  6 penguins B2          2     2 cell      FALSE    boolean    FALSE          #>  7 penguins C2          2     3 cell      FALSE    float      40.4           #>  8 penguins D2          2     4 cell      FALSE    float      4043           #>  9 penguins A3          3     1 cell      FALSE    string     Adelie         #> 10 penguins B3          3     2 cell      FALSE    boolean    TRUE           #> # ℹ 18 more rows #> # ℹ 20 more variables: base_value <chr>, numeric_value <dbl>, #> #   currency_symbol <chr>, boolean_value <lgl>, date_value <chr>, #> #   time_value <chr>, has_formula <lgl>, formula <chr>, has_error <lgl>, #> #   error_type <dbl>, has_annotation <lgl>, annotation <chr>, is_merged <lgl>, #> #   merge_colspan <dbl>, merge_rowspan <dbl>, merge_shape <chr>, #> #   cell_style <chr>, row_style <chr>, col_style <chr>, … palmerpenguins::penguins |>   tidyr::drop_na() |>   dplyr::group_by(species, female = sex == \"female\") |>   dplyr::summarise(     dplyr::across(c(bill_length_mm, body_mass_g), ~mean(.x, na.rm = TRUE)),     .groups = \"drop\"   ) #> # A tibble: 6 × 4 #>   species   female bill_length_mm body_mass_g #>   <fct>     <lgl>           <dbl>       <dbl> #> 1 Adelie    FALSE            40.4       4043. #> 2 Adelie    TRUE             37.3       3369. #> 3 Chinstrap FALSE            51.1       3939. #> 4 Chinstrap TRUE             46.6       3527. #> 5 Gentoo    FALSE            49.5       5485. #> 6 Gentoo    TRUE             45.6       4680. penguin_sheet <- read_ods_sheet(example_file, \"penguins\", quick = TRUE, quiet = TRUE)  penguin_sheet #> # A tibble: 7 × 4 #>   x1        x2     x3               x4               #>   <chr>     <chr>  <chr>            <chr>            #> 1 species   female bill_length_mm   body_mass_g      #> 2 Adelie    FALSE  40.3904109589041 4043.49315068493 #> 3 Adelie    TRUE   37.2575342465753 3368.83561643836 #> 4 Chinstrap FALSE  51.0941176470588 3938.97058823529 #> 5 Chinstrap TRUE   46.5735294117647 3527.20588235294 #> 6 Gentoo    FALSE  49.4737704918033 5484.83606557377 #> 7 Gentoo    TRUE   45.5637931034483 4679.74137931035 types_cells <- read_ods_cells(example_file, \"types\", quiet = TRUE)  types_cells |>    dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::glimpse() #> Rows: 150 #> Columns: 28 #> Groups: col [10] #> $ sheet                  <chr> \"types\", \"types\", \"types\", \"types\", \"types\", \"t… #> $ address                <chr> \"A2\", \"B2\", \"C2\", \"D2\", \"E2\", \"F2\", \"G2\", \"H2\",… #> $ row                    <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3,… #> $ col                    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6… #> $ cell_type              <chr> \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\",… #> $ is_empty               <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ value_type             <chr> \"string\", \"boolean\", \"currency\", \"date\", \"time\"… #> $ cell_content           <chr> \"Cell\", \"TRUE\", \"£1.20\", \"15/06/22\", \"13:24:56\"… #> $ base_value             <chr> \"Cell\", \"true\", \"1.2\", \"2022-06-15\", \"PT13H24M5… #> $ numeric_value          <dbl> NA, NA, 1.2000, NA, NA, NA, 12034.5679, 0.5467,… #> $ currency_symbol        <chr> NA, NA, \"GBP\", NA, NA, NA, NA, NA, NA, NA, NA, … #> $ boolean_value          <lgl> NA, TRUE, NA, NA, NA, NA, NA, NA, NA, NA, NA, F… #> $ date_value             <chr> NA, NA, NA, \"2022-06-15\", NA, \"2022-06-15T13:24… #> $ time_value             <chr> NA, NA, NA, NA, \"PT13H24M56S\", NA, NA, NA, NA, … #> $ has_formula            <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ formula                <chr> NA, NA, NA, NA, NA, NA, NA, NA, \"of:=[.G2]*[.H2… #> $ has_error              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ error_type             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, 7, NA, NA, … #> $ has_annotation         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ annotation             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Test c… #> $ is_merged              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ merge_colspan          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ merge_rowspan          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ merge_shape            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ cell_style             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ row_style              <chr> \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\"… #> $ col_style              <chr> \"co6\", \"co7\", \"co8\", \"co9\", \"co10\", \"co11\", \"co… #> $ col_default_cell_style <chr> \"Default\", \"ce15\", \"ce4\", \"ce11\", \"ce21\", \"ce31…  types_cells |>   dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::slice_head(n = 2) |>   dplyr::select(-cell_type) #> # A tibble: 20 × 27 #> # Groups:   col [10] #>    sheet address   row   col is_empty value_type cell_content        base_value  #>    <chr> <chr>   <dbl> <dbl> <lgl>    <chr>      <chr>               <chr>       #>  1 types A2          2     1 FALSE    string     Cell                Cell        #>  2 types A3          3     1 FALSE    string     Cell with comment   Cell with … #>  3 types B2          2     2 FALSE    boolean    TRUE                true        #>  4 types B3          3     2 FALSE    boolean    FALSE               false       #>  5 types C2          2     3 FALSE    currency   £1.20               1.2         #>  6 types C3          3     3 FALSE    currency   £1.20               1.2         #>  7 types D2          2     4 FALSE    date       15/06/22            2022-06-15  #>  8 types D3          3     4 FALSE    date       06/15/22            2022-06-15  #>  9 types E2          2     5 FALSE    time       13:24:56            PT13H24M56S #> 10 types E3          3     5 FALSE    time       13:24               PT13H24M56S #> 11 types F2          2     6 FALSE    date       15/06/2022 13:24:56 2022-06-15… #> 12 types F3          3     6 FALSE    date       15/06/22 13:24      2022-06-15… #> 13 types G2          2     7 FALSE    float      12035               12034.56789 #> 14 types G3          3     7 FALSE    float      12034.57            12034.56789 #> 15 types H2          2     8 FALSE    float      0.5467              0.5467      #> 16 types H3          3     8 FALSE    percentage 55%                 0.5467      #> 17 types I2          2     9 FALSE    float      6579.3              6579.29826… #> 18 types I3          3     9 FALSE    float      6579.3              6579.29826… #> 19 types J2          2    10 FALSE    string     #N/A                #N/A        #> 20 types J3          3    10 FALSE    string     #DIV/0!             #DIV/0!     #> # ℹ 19 more variables: numeric_value <dbl>, currency_symbol <chr>, #> #   boolean_value <lgl>, date_value <chr>, time_value <chr>, has_formula <lgl>, #> #   formula <chr>, has_error <lgl>, error_type <dbl>, has_annotation <lgl>, #> #   annotation <chr>, is_merged <lgl>, merge_colspan <dbl>, #> #   merge_rowspan <dbl>, merge_shape <chr>, cell_style <chr>, row_style <chr>, #> #   col_style <chr>, col_default_cell_style <chr>"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Read cells from ODS files","text":"ODS file zipped collection XML files associated files. tidyods, like readODS package, uses {xml2} package process file. main aim tidyods extract large set information cells, just just location value, slower readODS small medium sized files users unlikely see noticeable differences using read_ods_cells(). primary interest just cell location cell values setting argument quick = TRUE can result faster extraction process provides six columns: sheet, address, row, col, value_type base_value. quick extraction process varies base_value column constructed. quick = TRUE float percentage values taken raw numeric form, types cell_content used. means currency, date time value types value formatted spreadsheet application users returned rather “raw” value stored underlying XML file. Using package’s example file can see setting quick = TRUE results performance nearly comaprable provided readODS. test real-world performance can use ODS file published UK Government number civil servants postcode, contains large sheet 5,544 rows 11 columns. large sheet setting quick = TRUE delivers couple seconds slower extraction time compared provided readODS::read_ods(). dependency xml2 likely cause function fail/crash working exceptionally large files. limitation inherited libxml2 C library used power xml2, documented requiring available memory equal around 4 times size file processed. XML ODS contained zip file system file size ODS file can easily hide true requirements processing file. Files now checked size operations cancelled estimated exceed available memory.","code":"types_cells_quick <- read_ods_cells(example_file, \"types\",                                     quick = TRUE, quiet = TRUE)  types_cells_quick |>   dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::glimpse() #> Rows: 150 #> Columns: 6 #> Groups: col [10] #> $ sheet      <chr> \"types\", \"types\", \"types\", \"types\", \"types\", \"types\", \"type… #> $ address    <chr> \"A2\", \"B2\", \"C2\", \"D2\", \"E2\", \"F2\", \"G2\", \"H2\", \"I2\", \"J2\",… #> $ row        <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,… #> $ col        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1… #> $ value_type <chr> \"string\", \"boolean\", \"currency\", \"date\", \"time\", \"date\", \"f… #> $ base_value <chr> \"Cell\", \"TRUE\", \"£1.20\", \"15/06/22\", \"13:24:56\", \"15/06/202… bench::mark(   \"cells_quick\" =     read_ods_cells(example_file, 2, quick = TRUE, quiet = TRUE),   \"cells_slow\" =     read_ods_cells(example_file, 2, quiet = TRUE),   \"sheet_quick\" =     read_ods_sheet(example_file, 2, quick = TRUE, quiet = TRUE),   \"sheet_slow\" =     read_ods_sheet(example_file, 2, col_headers = FALSE, quiet = TRUE),   \"readODS\" =     readODS::read_ods(example_file, 2),   check = FALSE, filter_gc = FALSE, iterations = 20 ) |>    dplyr::transmute(expression, min, median, mean = total_time/n_itr, n_itr)    #> # A tibble: 5 × 7 #>   expression       min   median     mean n_itr #>   <bch:expr>  <bch:tm> <bch:tm> <bch:tm> <int> #> 1 cells_quick   55.4ms   61.2ms   61.9ms    20 #> 2 cells_slow    83.3ms   90.5ms   91.5ms    20 #> 3 sheet_quick   62.8ms   69.7ms   72.4ms    20 #> 4 sheet_slow    93.3ms  101.1ms  102.9ms    20 #> 5 readODS       50.4ms   53.7ms   55.3ms    20 postcodes_file <- system.file(\"extdata\", \"civil-service-postcodes-2021.ods\",   package = \"tidyods\")  bench::mark(   \"cells_quick\" =     read_ods_cells(postcodes_file, 2, quick = TRUE, quiet = TRUE),   \"cells_slow\" =     read_ods_cells(postcodes_file, 2, quiet = TRUE),   \"sheet_quick\" =     read_ods_sheet(postcodes_file, 2, quick = TRUE, quiet = TRUE),   \"sheet_slow\" =     read_ods_sheet(postcodes_file, 2, col_headers = FALSE, quiet = TRUE),   \"readODS\" =     readODS::read_ods(postcodes_file, 2),   check = FALSE, filter_gc = FALSE, iterations = 5 ) |>   dplyr::transmute(expression, min, median, mean = total_time/n_itr, n_itr)  #> # A tibble: 5 × 7 #>   expression       min   median     mean n_itr #>   <bch:expr>  <bch:tm> <bch:tm> <bch:tm> <int> #> 1 cells_quick    16.3s    16.7s    16.7s     5 #> 2 cells_slow     21.7s      22s    22.8s     5 #> 3 sheet_quick    18.3s    19.9s    19.7s     5 #> 4 sheet_slow     20.7s    23.3s      23s     5 #> 5 readODS        13.7s    14.8s    14.6s     5"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Read cells from ODS files","text":"{tidyODS} package heavily inspired three existing packages: {readODS} package provides functionality read write ODS files R, resulting data.frame reflecting way data viewed spreadsheet editor application (.e two-dimension table structure). {tidyxl} package reads cells Excel files provides data.frame cell row columns provide information cell’s location, value value type, formula formatting. {unpivotr} package works datasets cells (created tidyxl).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"philosophy","dir":"","previous_headings":"","what":"Philosophy","title":"Read cells from ODS files","text":"readODS package package CRAN handles reading ODS files, whereas 20 packages (12 June 2022) CRAN work Excel files (tidyxl one). respects due wider usage Excel files businesses, governments, academia organisations publish share data. Various governments international organisations starting mandate use OpenDocument Format files publishing information. initial purpose tidyods provide second package R ecosystem reading ODS files, part prompted encountering error readODS discovering alternative package available. working Excel spreadsheets, example run error using readxl package use easily try openxlsx xlsx packages instead. initial conceptual development code lead creation output dataset similar produced tidyxl package. Thus, tidyods extracts cells ODS document manner tidyxl, includes functions “rectify” cells also provide output similar readODS (many read Excel files). similar rectify function unpivotr package.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Read cells from ODS files","text":"Please note tidyods project released Contributor Code Conduct. contributing project, agree abide terms. Please read contributing guidelines.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"List the sheets in an ODS file — ods_sheets","title":"List the sheets in an ODS file — ods_sheets","text":"Get list sheets ODS file, either explore structure file use input iterating whole spreadsheet document.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the sheets in an ODS file — ods_sheets","text":"","code":"ods_sheets(path)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the sheets in an ODS file — ods_sheets","text":"path ODS file","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the sheets in an ODS file — ods_sheets","text":"character vector sheet names","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the sheets in an ODS file — ods_sheets","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") ods_sheets(example) #> [1] \"penguins\" \"types\"    \"merges\""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Read cells from an ODS sheet — read_ods_cells","title":"Read cells from an ODS sheet — read_ods_cells","text":"Import cells OpenDocument Spreadsheet (ODS) file. resulting dataset cell row columns providing information cell's position, value types containing formulas.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read cells from an ODS sheet — read_ods_cells","text":"","code":"read_ods_cells(path, sheet = 1, quick = FALSE, quiet = FALSE)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read cells from an ODS sheet — read_ods_cells","text":"path ODS file sheet sheet name index number, set NA sheets quick Whether use quick reading process quiet Whether silence console messages (recommended bulk processing)","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read cells from an ODS sheet — read_ods_cells","text":"tibble (data.frame) cells ODS sheet(s).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read cells from an ODS sheet — read_ods_cells","text":"aim read_ods_cells() extract constituent value(s) information cells stored ODS file present \"tidy\" format allows programmatic manipulation. modelled functionality tidyxl::tidy_xlsx() performs similar role Microsoft Excel spreadsheets. two four presentations cell's value resulting tibble: cells base_value, character vector providing \"raw\" version cell's value; cells also cell_content, character vector providing version cell's value seen user spreadsheet application (.e. applied number formatting rules); float, currency percentage value types, cells numeric_value raw value cell base R numeric vector, currency value types also currency_symbol providing 3-character ISO currency symbol; date value types, cells date_value, character vector date date-time ISO 8601 format; time value types, cells time_value, character vector time duration ISO 8601 format. Processing ODS XML memory intensive process, can achieve significant speed enhancements setting quick argument FALSE. process extract minimum information cells, namely: sheet, row, col, value_type base_value. base_value using quick argument combine raw value stored float percentage value types cell_content (.e. formatted character string) value types. details types information extracted read_ods_cells(), including examples different value types stored ODS file format extracted read_ods_cells() can found vignette, vignette(\"read_cells\", package = \"tidyods\").","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read cells from an ODS sheet — read_ods_cells","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") example_cells <- read_ods_cells(example, 1) dplyr::glimpse(example_cells) #> Rows: 28 #> Columns: 28 #> $ sheet                  <chr> \"penguins\", \"penguins\", \"penguins\", \"penguins\",… #> $ address                <chr> \"A1\", \"B1\", \"C1\", \"D1\", \"A2\", \"B2\", \"C2\", \"D2\",… #> $ row                    <dbl> 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,… #> $ col                    <dbl> 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,… #> $ cell_type              <chr> \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\",… #> $ is_empty               <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ value_type             <chr> \"string\", \"string\", \"string\", \"string\", \"string… #> $ cell_content           <chr> \"species\", \"female\", \"bill_length_mm\", \"body_ma… #> $ base_value             <chr> \"species\", \"female\", \"bill_length_mm\", \"body_ma… #> $ numeric_value          <dbl> NA, NA, NA, NA, NA, NA, 40.39041, 4043.49315, N… #> $ currency_symbol        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ boolean_value          <lgl> NA, NA, NA, NA, NA, FALSE, NA, NA, NA, TRUE, NA… #> $ date_value             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ time_value             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ has_formula            <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ formula                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ has_error              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ error_type             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ has_annotation         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ annotation             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ is_merged              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ merge_colspan          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ merge_rowspan          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ merge_shape            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ cell_style             <chr> NA, \"Default\", \"Default\", \"Default\", NA, NA, NA… #> $ row_style              <chr> \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\"… #> $ col_style              <chr> \"co1\", \"co2\", \"co3\", \"co4\", \"co1\", \"co2\", \"co3\"… #> $ col_default_cell_style <chr> \"Default\", \"ce56\", \"ce57\", \"ce58\", \"Default\", \"…"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"wrapper around read_ods_cells() one rectify functions provided package.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"","code":"read_ods_sheet(   path,   sheet = 1,   rectify = c(\"simple\", \"smart\"),   skip = 0,   col_headers = TRUE,   base_values = TRUE,   quick = FALSE,   quiet = FALSE )"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"path ODS file sheet sheet within ODS file rectify method convert cells two-dimensions, either \"simple\" \"smart (see details). skip number rows skip attempting rectify cells. col_headers Whether use first row (skipping) column header (TRUE default), alternatively character vector column names can provided. base_values Whether use base_value cell (TRUE, default) whether provide cell content seen spreadsheet user. quick Whether use quick reading process. quiet Whether silence console messages (recommended bulk processing)","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"tibble, presenting cells traditional two-dimension spreadsheet format.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"rectify = \"simple\" simple_rectify() function used coerce cells sheet. can instruct rectifier skip rows, whether use first row column headers (provide ), whether use underlying values formatted cell content value output cell. quick = TRUE implies using cell content, thus user setting base_values ignored treated set FALSE. rectify = \"smart\" smart_rectify() function used, attempt guess location column headers well coercing columns using value type information extracted ODS. Using smart rectifier ignores settings base_values, skip col_headers. set quick = TRUE want use smart rectifier.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") read_ods_sheet(example, 1) #> # A tibble: 6 × 4 #>   species   female bill_length_mm   body_mass_g      #>   <chr>     <chr>  <chr>            <chr>            #> 1 Adelie    false  40.3904109589041 4043.49315068493 #> 2 Adelie    true   37.2575342465753 3368.83561643836 #> 3 Chinstrap false  51.0941176470588 3938.97058823529 #> 4 Chinstrap true   46.5735294117647 3527.20588235294 #> 5 Gentoo    false  49.4737704918033 5484.83606557377 #> 6 Gentoo    true   45.5637931034483 4679.74137931035 read_ods_sheet(example, 2, \"smart\") #> # A tibble: 15 × 10 #>    String      Boolean Currency Date                Time     DateTime            #>    <chr>       <lgl>      <dbl> <dttm>              <time>   <dttm>              #>  1 \"Cell\"      TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  2 \"Cell with… FALSE        1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  3 \"Cell with… TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  4 \"Cell  wit… TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  5 \"Cells  wi… FALSE        1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  6 \"Cell with… FALSE        1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  7 \"Merged ce… TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  8  NA         FALSE        1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #>  9 \"Merged ce… FALSE        1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #> 10 \"Hidden te… TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #> 11 \"Cell with… FALSE        1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #> 12 \"Repeated … TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #> 13 \"Repeated … TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #> 14 \"Repeated … TRUE         1.2 2022-06-15 00:00:00 13:24:56 2022-06-15 13:24:56 #> 15 \"une cellu… NA          NA   NA                        NA NA                  #> # ℹ 4 more variables: Float <dbl>, Percentage <dbl>, Formula <dbl>, #> #   Errors <chr>"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ODS cells to a two-dimensional dataset — simple_rectify","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"two functions \"rectify\" set ODS cells extracted read_ods_cells() back traditional two-dimensional spreadsheet rectangle.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"","code":"simple_rectify(   ods_cells,   skip = 0,   col_headers = TRUE,   values_from = \"base_value\" )  smart_rectify(ods_cells)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"ods_cells set cells read_ods_cells(). skip number rows skip extracting sheet. col_headers Whether use first row (skipping) column header (TRUE default), alternatively character vector column names can provided. values_from column ods_cells output values .","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"tibble representing original spreadsheet format.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"simple_rectify() perform basic reshaping dataset, default use base_value extracted read_ods_cells() can changed different column setting values_from argument. rectifier also default try use first row column headers, alternatively can provide column names set col_headers = FALSE get generic column names x1, x2, etc. smart_rectify() performs complex reshaping dataset, guessing location column headers using value_type information generated read_ods_cells() determine whether columns can coerced non-string data type (either numeric, logical, date time).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") example_cells <- read_ods_cells(example, 1) simple_rectify(example_cells) #> # A tibble: 6 × 4 #>   species   female bill_length_mm   body_mass_g      #>   <chr>     <chr>  <chr>            <chr>            #> 1 Adelie    false  40.3904109589041 4043.49315068493 #> 2 Adelie    true   37.2575342465753 3368.83561643836 #> 3 Chinstrap false  51.0941176470588 3938.97058823529 #> 4 Chinstrap true   46.5735294117647 3527.20588235294 #> 5 Gentoo    false  49.4737704918033 5484.83606557377 #> 6 Gentoo    true   45.5637931034483 4679.74137931035 smart_rectify(example_cells) #> # A tibble: 6 × 4 #>   species   female bill_length_mm body_mass_g #>   <chr>     <lgl>           <dbl>       <dbl> #> 1 Adelie    FALSE            40.4       4043. #> 2 Adelie    TRUE             37.3       3369. #> 3 Chinstrap FALSE            51.1       3939. #> 4 Chinstrap TRUE             46.6       3527. #> 5 Gentoo    FALSE            49.5       5485. #> 6 Gentoo    TRUE             45.6       4680."},{"path":"https://mattkerlogue.github.io/tidyODS/reference/tidyods-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyods: Read cells from ODS files — tidyods-package","title":"tidyods: Read cells from ODS files — tidyods-package","text":"Import cells ODS files. Identify cell's postion, value types formulas, provide methods \"rectify\" cells back 2-dimensional data.frame.","code":""},{"path":[]},{"path":"https://mattkerlogue.github.io/tidyODS/reference/tidyods-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyods: Read cells from ODS files — tidyods-package","text":"Maintainer: Matt Kerlogue matt.kerlogue@.com","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/news/index.html","id":"tidyods-001","dir":"Changelog","previous_headings":"","what":"tidyods 0.0.1","title":"tidyods 0.0.1","text":"2023-04-27 Refactor code improve performance Handle complex text cell content (repeating spaces & paragraphs) Bump version 0.0.1","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/news/index.html","id":"tidyods-0009000","dir":"Changelog","previous_headings":"","what":"tidyods 0.0.0.9000","title":"tidyods 0.0.0.9000","text":"2022-06-27 Added smart_rectify() function attempts guess location data table within spreadsheet use value type information coerce columns non-character data types. Added NEWS.md file track changes package.","code":""}]
