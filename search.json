[{"path":[]},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement matt.kerlogue@.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidyods","title":"Contributing to tidyods","text":"outlines propose change tidyods R Package.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidyods","text":"R help documentation, including package’s webiste, created roxygen2 comments, need edit corresponding source .R file rather .Rd","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidyods","text":"’ve found bug, please file issue illustrates bug, preferably example code/example ODS file. want add new functionality propose improvements package code please create issue discuss explain idea(s).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidyods","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"mattkerlogue/tidyods\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR), e.g. new-feature -bug. Make changes, commit git, create PR, include fixes #issue-number title description request.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidyods","text":"New code follow tidyverse style guide. Documentation created using roxygen2, Markdown syntax. use testthat unit tests.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidyods","text":"Please note tidyods project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Matt Kerlogue Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Kerlogue. Author, maintainer.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kerlogue M (2023). tidyods: Read cells ODS files. https://github.com/mattkerlogue/tidyods, https://mattkerlogue.github.io/tidyods/.","code":"@Manual{,   title = {tidyods: Read cells from ODS files},   author = {Matt Kerlogue},   year = {2023},   note = {https://github.com/mattkerlogue/tidyods, https://mattkerlogue.github.io/tidyods/}, }"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"tidyods-","dir":"","previous_headings":"","what":"Read cells from ODS files","title":"Read cells from ODS files","text":"tidyods imports cells OpenDocument Spreadsheet (ODS) file, provides just cell’s value also information cell’s position, value types formulas tidy format allow programmatic analysis, investigation manipulation. also provides methods “rectify” cells back 2-dimensional data.frame.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read cells from ODS files","text":"can install development version tidyods like :","code":"remotes::install_github(\"mattkerlogue/tidyods\")"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read cells from ODS files","text":"can read cells via read_ods_cells() function. helper function ods_sheets() can list sheets ODS file. package includes example ODS two sheets: penguins types. penguins sheet simple 6 rows 4 columns sheet stores output following code: functions “rectify” tidyods data.frame back traditional 2-dimensional array, function read_ods_sheet() combines read_ods_cells() rectify functions easily import dataset. types sheet shows examples different ODS data types:","code":"library(tidyods)  example_file <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\")  ods_sheets(example_file) #> [1] \"penguins\" \"types\"  read_ods_cells(example_file, sheet = \"penguins\", quiet = TRUE) #> # A tibble: 28 × 25 #>    sheet      row   col cell_type is_empty value_type cell_content   base_value  #>    <chr>    <dbl> <dbl> <chr>     <lgl>    <chr>      <chr>          <chr>       #>  1 penguins     1     1 cell      FALSE    string     species        species     #>  2 penguins     1     2 cell      FALSE    string     female         female      #>  3 penguins     1     3 cell      FALSE    string     bill_length_mm bill_lengt… #>  4 penguins     1     4 cell      FALSE    string     body_mass_g    body_mass_g #>  5 penguins     2     1 cell      FALSE    string     Adelie         Adelie      #>  6 penguins     2     2 cell      FALSE    boolean    FALSE          false       #>  7 penguins     2     3 cell      FALSE    float      40.4           40.3904109… #>  8 penguins     2     4 cell      FALSE    float      4043           4043.49315… #>  9 penguins     3     1 cell      FALSE    string     Adelie         Adelie      #> 10 penguins     3     2 cell      FALSE    boolean    TRUE           true        #> # ℹ 18 more rows #> # ℹ 17 more variables: numeric_value <dbl>, currency_symbol <chr>, #> #   boolean_value <lgl>, date_value <chr>, time_value <chr>, has_formula <lgl>, #> #   formula <chr>, has_error <lgl>, error_type <dbl>, has_annotation <lgl>, #> #   annotation <chr>, is_merged <lgl>, merge_colspan <dbl>, #> #   merge_rowspan <dbl>, merge_shape <chr>, cell_style <chr>, row_style <chr> palmerpenguins::penguins |>   tidyr::drop_na() |>   dplyr::group_by(species, female = sex == \"female\") |>   dplyr::summarise(     dplyr::across(c(bill_length_mm, body_mass_g), ~mean(.x, na.rm = TRUE)),     .groups = \"drop\"   ) #> # A tibble: 6 × 4 #>   species   female bill_length_mm body_mass_g #>   <fct>     <lgl>           <dbl>       <dbl> #> 1 Adelie    FALSE            40.4       4043. #> 2 Adelie    TRUE             37.3       3369. #> 3 Chinstrap FALSE            51.1       3939. #> 4 Chinstrap TRUE             46.6       3527. #> 5 Gentoo    FALSE            49.5       5485. #> 6 Gentoo    TRUE             45.6       4680. penguin_sheet <- read_ods_sheet(example_file, \"penguins\", quick = TRUE, quiet = TRUE)  penguin_sheet #> # A tibble: 7 × 4 #>   x1        x2     x3               x4               #>   <chr>     <chr>  <chr>            <chr>            #> 1 species   female bill_length_mm   body_mass_g      #> 2 Adelie    FALSE  40.3904109589041 4043.49315068493 #> 3 Adelie    TRUE   37.2575342465753 3368.83561643836 #> 4 Chinstrap FALSE  51.0941176470588 3938.97058823529 #> 5 Chinstrap TRUE   46.5735294117647 3527.20588235294 #> 6 Gentoo    FALSE  49.4737704918033 5484.83606557377 #> 7 Gentoo    TRUE   45.5637931034483 4679.74137931035 types_cells <- read_ods_cells(example_file, \"types\", quiet = TRUE)  types_cells |>    dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::glimpse() #> Rows: 100 #> Columns: 25 #> Groups: col [10] #> $ sheet           <chr> \"types\", \"types\", \"types\", \"types\", \"types\", \"types\", … #> $ row             <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, … #> $ col             <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8,… #> $ cell_type       <chr> \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\"… #> $ is_empty        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ value_type      <chr> \"string\", \"boolean\", \"currency\", \"date\", \"time\", \"date… #> $ cell_content    <chr> \"Cell\", \"TRUE\", \"£1.20\", \"15/06/22\", \"13:24:56\", \"15/0… #> $ base_value      <chr> \"Cell\", \"true\", \"1.2\", \"2022-06-15\", \"PT13H24M56S\", \"2… #> $ numeric_value   <dbl> NA, NA, 1.2000, NA, NA, NA, 12034.5679, 0.5467, 6579.2… #> $ currency_symbol <chr> NA, NA, \"GBP\", NA, NA, NA, NA, NA, NA, NA, NA, NA, \"GB… #> $ boolean_value   <lgl> NA, TRUE, NA, NA, NA, NA, NA, NA, NA, NA, NA, FALSE, N… #> $ date_value      <chr> NA, NA, NA, \"2022-06-15\", NA, \"2022-06-15T13:24:56\", N… #> $ time_value      <chr> NA, NA, NA, NA, \"PT13H24M56S\", NA, NA, NA, NA, NA, NA,… #> $ has_formula     <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ formula         <chr> NA, NA, NA, NA, NA, NA, NA, NA, \"of:=[.G2]*[.H2]\", \"of… #> $ has_error       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ error_type      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, 7, NA, NA, NA, NA,… #> $ has_annotation  <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ annotation      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Test comment\"… #> $ is_merged       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ merge_colspan   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ merge_rowspan   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ merge_shape     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ cell_style      <chr> NA, NA, \"ce4\", \"ce11\", \"ce21\", \"ce31\", \"ce62\", NA, NA,… #> $ row_style       <chr> \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\"…  types_cells |>   dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::slice_head(n = 2) |>   dplyr::select(-cell_type) #> # A tibble: 20 × 24 #> # Groups:   col [10] #>    sheet   row   col is_empty value_type cell_content   base_value numeric_value #>    <chr> <dbl> <dbl> <lgl>    <chr>      <chr>          <chr>              <dbl> #>  1 types     2     1 FALSE    string     Cell           Cell              NA     #>  2 types     3     1 FALSE    string     Cell with com… Cell with…        NA     #>  3 types     2     2 FALSE    boolean    TRUE           true              NA     #>  4 types     3     2 FALSE    boolean    FALSE          false             NA     #>  5 types     2     3 FALSE    currency   £1.20          1.2                1.2   #>  6 types     3     3 FALSE    currency   £1.20          1.2                1.2   #>  7 types     2     4 FALSE    date       15/06/22       2022-06-15        NA     #>  8 types     3     4 FALSE    date       06/15/22       2022-06-15        NA     #>  9 types     2     5 FALSE    time       13:24:56       PT13H24M5…        NA     #> 10 types     3     5 FALSE    time       13:24          PT13H24M5…        NA     #> 11 types     2     6 FALSE    date       15/06/2022 13… 2022-06-1…        NA     #> 12 types     3     6 FALSE    date       15/06/22 13:24 2022-06-1…        NA     #> 13 types     2     7 FALSE    float      12035          12034.567…     12035.    #> 14 types     3     7 FALSE    float      12034.57       12034.567…     12035.    #> 15 types     2     8 FALSE    float      0.5467         0.5467             0.547 #> 16 types     3     8 FALSE    percentage 55%            0.5467             0.547 #> 17 types     2     9 FALSE    float      6579.3         6579.2982…      6579.    #> 18 types     3     9 FALSE    float      6579.3         6579.2982…      6579.    #> 19 types     2    10 FALSE    string     #N/A           #N/A              NA     #> 20 types     3    10 FALSE    string     #DIV/0!        #DIV/0!           NA     #> # ℹ 16 more variables: currency_symbol <chr>, boolean_value <lgl>, #> #   date_value <chr>, time_value <chr>, has_formula <lgl>, formula <chr>, #> #   has_error <lgl>, error_type <dbl>, has_annotation <lgl>, annotation <chr>, #> #   is_merged <lgl>, merge_colspan <dbl>, merge_rowspan <dbl>, #> #   merge_shape <chr>, cell_style <chr>, row_style <chr>"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Read cells from ODS files","text":"ODS file zipped collection XML files associated files. tidyods, like readODS package, uses {xml2} package process file. three likely sources performance issues: downloading remote files, unzipping ODS file, processing rows. Performance read_ods_cells() read_ods_sheet() largely comparable provided readODS. Performance can improved setting quick = TRUE, extracts . test real-world performance use ODS file published UK Government number civil servants postcode, sheet 5,544 rows 11 columns. dependency xml2 likely cause function fail/crash working exceptionally large files. Performance issues tracked discussed issue #3 package’s GitHub repository.","code":"types_cells_quick <- read_ods_cells(example_file, \"types\",                                     quick = TRUE, quiet = TRUE)  types_cells_quick |>   dplyr::filter(row > 1) |>   dplyr::group_by(col) |>   dplyr::glimpse() #> Rows: 100 #> Columns: 5 #> Groups: col [10] #> $ sheet      <chr> \"types\", \"types\", \"types\", \"types\", \"types\", \"types\", \"type… #> $ row        <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,… #> $ col        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1… #> $ value_type <chr> \"string\", \"boolean\", \"currency\", \"date\", \"time\", \"date\", \"f… #> $ base_value <chr> \"Cell\", \"TRUE\", \"£1.20\", \"15/06/22\", \"13:24:56\", \"15/06/202… microbenchmark::microbenchmark(   tidy_quick = read_ods_cells(example_file, 1, quick = TRUE, quiet = TRUE),   tidy_slow = read_ods_cells(example_file, 1, quiet = TRUE),   tidy_sheet_quick = read_ods_sheet(example_file, 1, quick = TRUE, quiet = TRUE),   tidy_sheet_slow = read_ods_sheet(example_file, 1, col_headers = FALSE, quiet = TRUE),   read_ods = readODS::read_ods(example_file, 1),   times = 100 )  #> Unit: milliseconds #>              expr    min     lq   mean median     uq    max neval #>        tidy_quick 15.232 15.471 17.184 15.756 19.634 24.963   100 #>         tidy_slow 28.351 28.964 32.354 32.619 33.129 93.572   100 #>  tidy_sheet_quick 20.235 20.714 22.607 20.949 24.923 33.244   100 #>   tidy_sheet_slow 33.687 37.592 38.502 38.236 38.654 83.943   100 #>          read_ods 22.087 22.490 24.853 22.696 26.275 86.275   100 postcodes_file <- system.file(\"extdata\", \"civil-service-postcodes-2021.ods\",   package = \"tidyods\")  microbenchmark::microbenchmark(   tidy_quick = read_ods_cells(postcodes_file, 2, quick = TRUE, quiet = TRUE),   tidy_slow = read_ods_cells(postcodes_file, 2, quiet = TRUE),   tidy_sheet_quick = read_ods_sheet(postcodes_file, 2, quick = TRUE, quiet = TRUE),   tidy_sheet_slow = read_ods_sheet(postcodes_file, 2, col_headers = FALSE, quiet = TRUE),   read_ods = readODS::read_ods(postcodes_file, 2),   times = 10 )  #> Unit: seconds #>             expr    min     lq   mean median     uq    max neval #>       tidy_quick  4.003  4.055  4.129  4.088  4.193  4.341    10 #>        tidy_slow 10.453 10.497 10.592 10.559 10.636 10.992    10 #> tidy_sheet_quick  4.096  4.125  4.232  4.170  4.260  4.660    10 #>  tidy_sheet_slow 10.679 10.786 10.983 10.908 11.158 11.669    10 #>         read_ods 10.552 10.757 10.877 10.801 10.971 11.493    10"},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Read cells from ODS files","text":"{tidyODS} package heavily inspired three existing packages: {readODS} package provides functionality read write ODS files R, resulting data.frame reflecting way data viewed spreadsheet editor application (.e two-dimension table structure). {tidyxl} package reads cells Excel files provides data.frame cell row columns provide information cell’s location, value value type, formula formatting. {unpivotr} package works datasets cells (created tidyxl).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"philosophy","dir":"","previous_headings":"","what":"Philosophy","title":"Read cells from ODS files","text":"readODS package package CRAN handles reading ODS files, whereas 20 packages (12 June 2022) CRAN work Excel files (tidyxl one). respects due wider usage Excel files businesses, governments, academia organisations publish share data. Various governments international organisations starting mandate use OpenDocument Format files publishing information. initial purpose tidyods provide second package R ecosystem reading ODS files, part prompted encountering error readODS discovering alternative package available. working Excel spreadsheets, example run error using readxl package use easily try openxlsx xlsx packages instead. initial conceptual development code lead creation output dataset similar produced tidyxl package. Thus, tidyods extracts cells ODS document manner tidyxl, includes functions “rectify” cells also provide output similar readODS (many read Excel files). similar rectify function unpivotr package.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Read cells from ODS files","text":"Please note tidyods project released Contributor Code Conduct. contributing project, agree abide terms. Please read contributing guidelines.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"List the sheets in an ODS file — ods_sheets","title":"List the sheets in an ODS file — ods_sheets","text":"Get list sheets ODS file, either explore structure file use input iterating whole spreadsheet document.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the sheets in an ODS file — ods_sheets","text":"","code":"ods_sheets(path)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the sheets in an ODS file — ods_sheets","text":"path ODS file","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the sheets in an ODS file — ods_sheets","text":"character vector sheet names","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/ods_sheets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the sheets in an ODS file — ods_sheets","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") ods_sheets(example) #> [1] \"penguins\" \"types\""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Read cells from an ODS sheet — read_ods_cells","title":"Read cells from an ODS sheet — read_ods_cells","text":"Import cells OpenDocument Spreadsheet (ODS) file. resulting dataset cell row columns providing information cell's position, value types containing formulas.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read cells from an ODS sheet — read_ods_cells","text":"","code":"read_ods_cells(path, sheet = 1, quick = FALSE, quiet = FALSE)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read cells from an ODS sheet — read_ods_cells","text":"path ODS file sheet sheet name index number, set NA sheets quick Whether use quick reading process quiet Whether silence console messages (recommended bulk processing)","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read cells from an ODS sheet — read_ods_cells","text":"tibble (data.frame) cells ODS sheet(s).","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read cells from an ODS sheet — read_ods_cells","text":"goal read_ods_cells() extract constituent value(s) information cells stored ODS file present \"tidy\" format allows programmatic manipulation. modelled functionality tidyxl::tidy_xlsx() performs similar role Microsoft Excel spreadsheets. two four presentations cell's value resulting tibble: base_value, character vector providing \"raw\" version cell's value (see regarding variation setting quick=TRUE); cell_content, character vector providing version cell's value seen user spreadsheet application; float, currency percentage value types, numeric_value raw value cell base R numeric vector, currency value types also currency_symbol providing 3-character ISO currency symbol; date time value types, character vector raw value conforming relevant ISO standard. Processing ODS XML memory intensive process, can achieve significant speed enhancements setting quick argument FALSE. process wille extract minimum information cells, namely: sheet, row, col, value_type base_value. base_value using quick argument combine raw value stored float percentage value types cell_content (.e formatted character string) value types. #' @details # Cell information resulting data.frame 25 columns: sheet: sheet cell row: row number cell col: column number cell cell_type: type cell, either cell, empty, merge-hidden merge-lead is_empty: logical vector indicating cell empty value_type: value type, either boolean, currency, date, float, percentage, string time cell_content: content presented users spreadsheet application base_value: \"base\" value cell numeric_value: base values numeric value types numeric vector currency_symbol: currency symbol associated currency value types boolean_value: base values boolean value types logical vector date_value: base values date value types (incl date-time) character vector time_value: base value time value types character vector has_formula: logical vector indicating cell content calculated formula formula: formula used calculate cell content has_error: logical vector indicating cell formula results error error_type: numeric vector indicating type error has_annotation: logival vector indicating cell comment annotation annotation: text comment annotation is_merged: logical indicating cell part merge group merge_colspan: merge leader cells, number columns spanned merge_rowspan: merge leader cells, number rows spanned merge_shape: merge leader cells, shape merge group, either vetical, horizontal, rectangle cell_style: style code cell row_style: style code row","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"cell-types-and-merge-groups","dir":"Reference","previous_headings":"","what":"Cell types and merge groups","title":"Read cells from an ODS sheet — read_ods_cells","text":"Cells assigned one four cell_type values: cell empty content value type, cell merge-lead top-left cell merge group, cells merge group assigned merge-hidden everything else simply cell Cells merge group also is_merged set TRUE. top-left cell merge group information number columns (merge_colspan) rows (merge_rowspan) merge group well indication shape (vertical, horizontal rectangle). Merge groups uniquely identified. ODS specification allows cells hidden merge content, annecdotally appears supported ODS files created LibreOffice ODS files created Microsoft Excel.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"value-types","dir":"Reference","previous_headings":"","what":"Value types","title":"Read cells from an ODS sheet — read_ods_cells","text":"value_type cell based \"value-type\" attribute defined OpenDocument Format specification. 7 value types: boolean: equivalent R's base::logical() data type currency: numeric value, optionally currency symbol date: date date-time stored ISO format float: numeric value, ODS format distinguish different numeric types percentage: numeric value, formatted display percentage string: equivalent R's base::character() time: duration, stored ISO format currency value types optionally currency symbol (e.g. GBP, EUR, USD) can set, provided separately base_value currency_symbol, formatting currency symbols handled style information, value visible spreadsheet user provided cell_content column.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"error-types","dir":"Reference","previous_headings":"","what":"Error types","title":"Read cells from an ODS sheet — read_ods_cells","text":"values error_type equivalent produced Microsoft Excel LibreOffice.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read cells from an ODS sheet — read_ods_cells","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") example_cells <- read_ods_cells(example, 1) #> ℹ Extracting XML #> ✔ Extracting XML [26ms] #>  #> ℹ Getting sheet #> ✔ Getting sheet [17ms] #>  #> ℹ Extracting cell and row info #> ✔ Extracting cell and row info [143ms] #>  dplyr::glimpse(example_cells) #> Rows: 28 #> Columns: 25 #> $ sheet           <chr> \"penguins\", \"penguins\", \"penguins\", \"penguins\", \"pengu… #> $ row             <dbl> 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, … #> $ col             <dbl> 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, … #> $ cell_type       <chr> \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\", \"cell\"… #> $ is_empty        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ value_type      <chr> \"string\", \"string\", \"string\", \"string\", \"string\", \"boo… #> $ cell_content    <chr> \"species\", \"female\", \"bill_length_mm\", \"body_mass_g\", … #> $ base_value      <chr> \"species\", \"female\", \"bill_length_mm\", \"body_mass_g\", … #> $ numeric_value   <dbl> NA, NA, NA, NA, NA, NA, 40.39041, 4043.49315, NA, NA, … #> $ currency_symbol <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ boolean_value   <lgl> NA, NA, NA, NA, NA, FALSE, NA, NA, NA, TRUE, NA, NA, N… #> $ date_value      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ time_value      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ has_formula     <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ formula         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ has_error       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ error_type      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ has_annotation  <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ annotation      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ is_merged       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ merge_colspan   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ merge_rowspan   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ merge_shape     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ cell_style      <chr> NA, \"Default\", \"Default\", \"Default\", NA, NA, NA, NA, N… #> $ row_style       <chr> \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\", \"ro1\"…"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"wrapper around read_ods_cells() one rectify functions provided package.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"","code":"read_ods_sheet(   path,   sheet = 1,   rectify = c(\"simple\", \"smart\"),   skip = 0,   col_headers = TRUE,   base_values = TRUE,   quick = FALSE,   quiet = FALSE )"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"path ODS file sheet sheet within ODS file rectify method convert cells two-dimensions, either \"simple\" \"smart (see details). skip number rows skip attempting rectify cells. col_headers Whether use first row (skipping) column header (TRUE default), alternatively character vector column names can provided. base_values Whether use base_value cell (TRUE, default) whether provide cell content seen spreadsheet user. quick Whether use quick reading process. quiet Whether silence console messages (recommended bulk processing)","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"tibble, presenting cells traditional two-dimension spreadsheet format.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"rectify = \"simple\" simple_rectify() function used coerce cells sheet. can instruct rectifier skip rows, whether use first row column headers (provide ), whether use underlying values formatted cell content value output cell. quick = TRUE implies using cell content, thus user setting base_values ignored treated set FALSE. rectify = \"smart\" smart_rectify() function used, attempt guess location column headers well coercing columns using value type information extracted ODS. Using smart rectifier ignores settings base_values, skip col_headers. set quick = TRUE want use smart rectifier.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/read_ods_sheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an ODS sheet to a rectangular dataset — read_ods_sheet","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") read_ods_sheet(example, 1) #> ℹ Extracting XML #> ✔ Extracting XML [9ms] #>  #> ℹ Getting sheet #> ✔ Getting sheet [15ms] #>  #> ℹ Extracting cell and row info #> ✔ Extracting cell and row info [113ms] #>  #> ℹ Rectifying cells to sheet layout #> ✔ Rectifying cells to sheet layout [29ms] #>  #> # A tibble: 6 × 4 #>   species   female bill_length_mm   body_mass_g      #>   <chr>     <chr>  <chr>            <chr>            #> 1 Adelie    false  40.3904109589041 4043.49315068493 #> 2 Adelie    true   37.2575342465753 3368.83561643836 #> 3 Chinstrap false  51.0941176470588 3938.97058823529 #> 4 Chinstrap true   46.5735294117647 3527.20588235294 #> 5 Gentoo    false  49.4737704918033 5484.83606557377 #> 6 Gentoo    true   45.5637931034483 4679.74137931035 read_ods_sheet(example, 2, \"smart\") #> ℹ Extracting XML #> ✔ Extracting XML [9ms] #>  #> ℹ Getting sheet #> ✔ Getting sheet [16ms] #>  #> ℹ Extracting cell and row info #> ✔ Extracting cell and row info [154ms] #>  #> ℹ Rectifying cells to sheet layout #> ✔ Rectifying cells to sheet layout [170ms] #>  #> # A tibble: 11 × 10 #>    String      Boolean Currency Date  Time  DateTime    Float Percentage Formula #>    <chr>       <chr>   <chr>    <chr> <chr> <chr>       <dbl>      <dbl> <chr>   #>  1 \"Cell\"      true    1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #>  2 \"Cell with… false   1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #>  3 \"Cell with… true    1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #>  4 \"Cell     … true    1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #>  5 \"Cells  wi… false   1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #>  6 \"Cell with… false   1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #>  7 \"Merged ce… true    1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #>  8 \"false\"     1.2     2022-06… PT13… 2022… 12034.5…  5.47e-1   6579.    Err:533 #>  9 \"Merged ce… false   1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #> 10 \"Hidden te… true    1.2      2022… PT13… 2022-06…  1.20e+4      0.547 6579.2… #> 11 \"une cellu… NA      NA       NA    NA    NA       NA           NA     NA      #> # ℹ 1 more variable: Errors <chr>"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ODS cells to a two-dimensional dataset — simple_rectify","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"two functions \"rectify\" set ODS cells extracted read_ods_cells() back traditional two-dimensional spreadsheet rectangle.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"","code":"simple_rectify(ods_cells, skip = 0, col_headers = TRUE, base_values = TRUE)  smart_rectify(ods_cells)"},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"ods_cells set cells read_ods_cells(). skip number rows skip attempting rectify cells. col_headers Whether use first row (skipping) column header (TRUE default), alternatively character vector column names can provided. base_values Whether use base_value cell (TRUE, default) whether provide formatted cell_content, see read_ods_cells() details.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"tibble representing original spreadsheet format.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"simple_rectify() perform basic reshaping dataset using either base_value cell_content column supplied cells. also provides options skip rows whether set column headers. smart_rectify() performs complex reshaping dataset, guessing location column headers using value_type information generated read_ods_cells() determine whether columns can coerced non-string data type (either numeric, logical, date time). set TRUE (default) base_values argument underlying cell values used. FALSE cell content seen spreadsheet application user shown. See read_ods_cells() details. col_headers = FALSE otherwise issue obtaining headers dataset format \"X#\", .e. \"X1\", \"X2\", etc.","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/reference/rectify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ODS cells to a two-dimensional dataset — simple_rectify","text":"","code":"example <- system.file(\"extdata\", \"basic_example.ods\", package = \"tidyods\") example_cells <- read_ods_cells(example, 1) #> ℹ Extracting XML #> ✔ Extracting XML [10ms] #>  #> ℹ Getting sheet #> ✔ Getting sheet [17ms] #>  #> ℹ Extracting cell and row info #> ✔ Extracting cell and row info [101ms] #>  simple_rectify(example_cells, base_values = TRUE) #> # A tibble: 6 × 4 #>   species   female bill_length_mm   body_mass_g      #>   <chr>     <chr>  <chr>            <chr>            #> 1 Adelie    false  40.3904109589041 4043.49315068493 #> 2 Adelie    true   37.2575342465753 3368.83561643836 #> 3 Chinstrap false  51.0941176470588 3938.97058823529 #> 4 Chinstrap true   46.5735294117647 3527.20588235294 #> 5 Gentoo    false  49.4737704918033 5484.83606557377 #> 6 Gentoo    true   45.5637931034483 4679.74137931035 smart_rectify(example_cells) #> # A tibble: 6 × 4 #>   species   female bill_length_mm body_mass_g #>   <chr>     <lgl>           <dbl>       <dbl> #> 1 Adelie    FALSE            40.4       4043. #> 2 Adelie    TRUE             37.3       3369. #> 3 Chinstrap FALSE            51.1       3939. #> 4 Chinstrap TRUE             46.6       3527. #> 5 Gentoo    FALSE            49.5       5485. #> 6 Gentoo    TRUE             45.6       4680."},{"path":"https://mattkerlogue.github.io/tidyODS/news/index.html","id":"tidyods-001","dir":"Changelog","previous_headings":"","what":"tidyods 0.0.1","title":"tidyods 0.0.1","text":"2023-04-27 Refactor code improve performance Handle complex text cell content (repeating spaces & paragraphs) Bump version 0.0.1","code":""},{"path":"https://mattkerlogue.github.io/tidyODS/news/index.html","id":"tidyods-0009000","dir":"Changelog","previous_headings":"","what":"tidyods 0.0.0.9000","title":"tidyods 0.0.0.9000","text":"2022-06-27 Added smart_rectify() function attempts guess location data table within spreadsheet use value type information coerce columns non-character data types. Added NEWS.md file track changes package.","code":""}]
